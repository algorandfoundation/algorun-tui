name: Tests

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Install dependencies
        run: go get .

      - name: Check formatting
        run: |
          fmt_files=$(gofmt -l .)
          if [ -n "$fmt_files" ]; then
            echo "Go code is not formatted. Please run 'go fmt'."
            gofmt -d .
            exit 1
          fi

      - name: Tidy go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum
          if [ $? -ne 0 ]; then
            echo "go.mod or go.sum is not tidy. Please run 'go mod tidy'."
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Build
        run: go build .

      - name: Test with the Go CLI
        run: go test -cover -coverprofile=coverage.txt ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.txt

  code_coverage:
    name: "Code coverage report"
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      actions: read
      pull-requests: write
    steps:
      - uses: fgrosse/go-coverage-report@v1.1.1
        with:
          coverage-artifact-name: "code-coverage"
          coverage-file-name: "coverage.txt"

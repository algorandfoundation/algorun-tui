// Package rpc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package rpc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Status A status response
type Status struct {
	// LastRound Last round the status has knowledge of
	LastRound *float32 `json:"lastRound,omitempty"`

	// NeedsUpdate If the node requires and update
	NeedsUpdate *bool `json:"needsUpdate,omitempty"`

	// Network Network ID
	Network *string `json:"network,omitempty"`

	// State The state of the node
	State *string `json:"state,omitempty"`

	// Version Version reported by the node
	Version *string `json:"version,omitempty"`

	// Voting If the network is voting on an upgrade
	Voting *bool `json:"voting,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /agreement/{hash})
	GetAgreementEvents(ctx echo.Context, hash string) error

	// (GET /metrics)
	GetMetrics(ctx echo.Context) error
	// Retrieve current status
	// (GET /status)
	GetStatus(ctx echo.Context) error

	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAgreementEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgreementEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgreementEvents(ctx, hash)
	return err
}

// GetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetrics(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/agreement/:hash", wrapper.GetAgreementEvents)
	router.GET(baseURL+"/metrics", wrapper.GetMetrics)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RUXW/bOgz9KwTvffSN21vgXsBvARZ0AbahaLvtYeiDYjGxWlvUJDppEfi/D1JsB8hH",
	"t6Jvgnh4eHhEcYslN44tWQlYbDGUFTUqHe9ESZtOmkLpjRPDFgucQkgR8BQc20CYofPsyIuhhK9VkFtu",
	"rT5O/qSCgI8xkIoGpkoFeLK8qUmvCHiJGcqLIyzQts2CPHYZWiIdvjqthI5p58tEZ1kTePrZGk8BlNXQ",
	"7hJGvgVzTcruCGXD/umY7MsuAPMP+7wg3thVTIuSTyi477uJ8kctp/LX5ENKOWT4tguAJ8deSMPi5XUi",
	"lng660XfhQmwQwJbUBZat/JKn7KkG6948UilYBevjF1yLFKyFVVKPFrVRNS0XnEUNzGMGba+xgIrEReK",
	"PFf7WD5kdtnhJN3Mgax2bKzAkj3ELA1xlFSEhElUaaQeqmm4nd3dw/RmHiOjk3g1ufwv0rMjq5xJNxeT",
	"yziYSqo0k7laeaKGrOTbSoWqi5crSv2MBecaC7wmmQ7Y2Tp9jMjjVUNCPmDx49DxjypUIAw181PrMHqG",
	"RSqN2WBWrIkZ9sOpsRDfUtb/tyji4H27hwjefbDUwL8XF8MzkE2ylXO1KZPw/DHsRuo835H71yQwNgqU",
	"Oo0zF7uJ+C7DvCHxpgyvefW5h7xJrtCzvFHujeeGpKI2wOzZcTDxHmb9+AyCw7i0zunt19o73f3b0xIL",
	"/Cvfr8+83515X+FED7eppIaNkQpGWIahbRrlXxJCvKE1Qdl6H98l7FH55tXGvr+7qd++wZ20y2WyOoom",
	"vx7+w/7zF3lec6nqioMUl1dX/+fYZduD7dAoYy3JP8qZybgpyppbfQotFOTP0QsSdRb90P0KAAD//34V",
	"Tl3xBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
